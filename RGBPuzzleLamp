#include <FastLED.h>
#include <Bounce.h>

#define DATA_PIN 11
#define CLOCK_PIN 13
#define CONTROL_DISPLAY_DATA_PIN 10
#define NUM_LEDS    32
#define LED_TYPE    LPD8806
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];
CRGB ledcontrolldisplay[4];
CRGB veriable[4];
// COOLING: How much does the air cool as it rises?
// Less cooling = taller flames.  More cooling = shorter flames.
// Default 50, suggested range 20-100
#define COOLING  50   // for fire

// SPARKING: What chance (out of 255) is there that a new spark will be lit?
// Higher chance = more roaring fire.  Lower chance = more flickery fire.
// Default 120, suggested range 50-200.
#define SPARKING 100    // for fire

const int speedPotPin = A0;
int potVal = 0;
int UPDATES_PER_SECOND = (potVal);
const int brightnessPotPin = A1;
int brightnessReading = 0;
int BRIGHTNESS = (brightnessReading);
const int veriableColorPotPin[4] = {A2, A3, A4, A5};
const int paternSelectionSwitchPin = 12;
Bounce pushbutton = Bounce(paternSelectionSwitchPin, 20);  // 10 ms debounce
int paternSelection = 0;

CRGBPalette16 currentPalette;

TBlendType    currentBlending;

byte previousState = HIGH;         // what state was the button last time
unsigned int counter = 0;            // how many times has it changed to low
unsigned long countAt = 0;         // when count changed
unsigned int countPrinted = 0;     // last count printed


byte seven_seg_digits[10][7] = {                         { 0, 0, 0, 0, 0, 0, 1 }, // = 0
  { 1, 0, 0, 1, 1, 1, 1 }, // = 1
  { 0, 0, 1, 0, 0, 1, 0 }, // = 2
  { 0, 0, 0, 0, 1, 1, 0 }, // = 3
  { 1, 0, 0, 1, 1, 0, 0 }, // = 4
  { 0, 1, 0, 0, 1, 0, 0 }, // = 5
  { 0, 1, 0, 0, 0, 0, 0 }, // = 6
  { 0, 0, 0, 1, 1, 1, 1 }, // = 7
  { 0, 0, 0, 0, 0, 0, 0 }, // = 8
  { 0, 0, 0, 1, 1, 0, 0 } // = 9
};


// 7 segment pins for decimal point and each segment
//                         dp,G,F,E,D,C,B,A
const int segmentPins[8] = {7, 9, 2, 6, 8, 4, 3, 5};


void setup() {
  delay( 2000 ); // power-up safety delay
  pinMode(paternSelectionSwitchPin, INPUT);
  digitalWrite (paternSelectionSwitchPin, HIGH);
  FastLED.addLeds<WS2811, CONTROL_DISPLAY_DATA_PIN>(ledcontrolldisplay, 4).setCorrection( TypicalLEDStrip ); //WS2812 NEOPIXEL
  FastLED.addLeds<LED_TYPE, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );

  for (int i = 0; i < 8; i++)
  {
    pinMode(segmentPins[i], OUTPUT); // set segment and DP pins to output
  }
  writeDot(0);  // start with the "dot" off
}


void loop()
{
  potVal = map(analogRead(speedPotPin), 0, 1023, 250, 1);
  UPDATES_PER_SECOND = (potVal);

  brightnessReading = map(analogRead(brightnessPotPin), 0, 1023, 1, 255);  //works
  BRIGHTNESS = (brightnessReading);

  ReadColorPots();

  if (pushbutton.update()) {
    if (pushbutton.fallingEdge()) {
      counter = counter + 1;
      countAt = millis();
    }
  }
  else {
    if (counter != countPrinted) {
      unsigned long nowMillis = millis();
      if (nowMillis - countAt > 100) {
        countPrinted = counter;
      }
      if (counter > 15) {
        counter = 0;

      }
    }

  }

  paternSelection = counter;

  if (paternSelection < (6) ) {
    ReadColorPots();
  }
  else {
    TurnOffColorPots();
  }

  switch (paternSelection)  {
    case 0:
      sevenSegWrite(0);
      writeDot(1);
      SetupVeriablePalette0();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 1:
      sevenSegWrite(1);
      writeDot(1);
      SetupVeriablePalette1();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 2:
      sevenSegWrite(2);
      writeDot(1);
      SetupVeriablePalette2();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 3:
      sevenSegWrite(3);
      writeDot(1);
      SetupVeriablePalette3();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 4:
      sevenSegWrite(4);
      writeDot(1);
      SetupVeriablePalette4();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 5:
      sevenSegWrite(5);
      writeDot(1);
      SetupVeriablePalette5();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 6:
      sevenSegWrite(6);
      writeDot(1);
      currentPalette = RainbowColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 7:
      sevenSegWrite(7);
      writeDot(1);
      currentPalette = RainbowStripeColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 8:
      sevenSegWrite(8);
      writeDot(1);
      currentPalette = CloudColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 9:
      sevenSegWrite(9);
      writeDot(1);
      currentPalette = PartyColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 10:
      sevenSegWrite(0);
      writeDot(0);
      currentPalette = ForestColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 11:
      sevenSegWrite(1);
      writeDot(0);
      currentPalette = OceanColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 12:
      sevenSegWrite(2);
      writeDot(0);
      SetupPurpleAndGreenPalette();
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 13:
      sevenSegWrite(3);
      writeDot(0);
      currentPalette = LavaColors_p;
      currentBlending = BLEND;
      palletteStuff();
      break;
    case 14:
      sevenSegWrite(4);
      writeDot(0);
      rainbow2();
      break;
    case 15:
      sevenSegWrite(5);
      //      currentPalette = HeatColors_p;
      writeDot(0);
      fire();
      break;
    default:
      sevenSegWrite(0);
      writeDot(1);
      SetupVeriablePalette0();
      currentBlending = BLEND;
      palletteStuff();
      break;
  }
  {
  }
}


void palletteStuff()
{
  static uint8_t startIndex = 0;
  startIndex = startIndex + 1; /* motion speed */
  FillLEDsFromPaletteColors( startIndex);
  FastLED.show();
  FastLED.delay(1000 / UPDATES_PER_SECOND);
}


void FillLEDsFromPaletteColors( uint8_t colorIndex)
{
  for ( int i = 0; i < NUM_LEDS; i++) {
    leds[i] = ColorFromPalette( currentPalette, colorIndex, BRIGHTNESS, currentBlending);
    colorIndex += 3; // Defines the width of the collor bands - Dynamic changes in this are problomatic - flickering
  }
}


void ReadColorPots()
{
  for ( int i = 0; i < 4; i++) {
    veriable[i] = CHSV( map(analogRead(veriableColorPotPin[i]), 0, 1023, 0, 255), 255, 255);  //240 turns to red again
    ledcontrolldisplay[i] = veriable[i];
    ledcontrolldisplay[i] %= 25;
  }
}


void TurnOffColorPots()
{
  CRGB black  = CRGB::Black;
  for ( int i = 0; i < 4; i++) {
    ledcontrolldisplay[i] = black;
  }
}


void SetupVeriablePalette0()
{
  CRGB white = CRGB::Grey;
  currentPalette = CRGBPalette16(
                     white, white, white, white,
                     white, white, white, white,
                     white, white, white, white,
                     white, white, white, white);
}


void SetupVeriablePalette1()
{
  CRGB black  = CRGB::Black;
  currentPalette = CRGBPalette16(
                     veriable[0], veriable[0], veriable[0],  black,
                     veriable[1], veriable[1], veriable[0],  black,
                     veriable[2], veriable[2], veriable[0],  black,
                     veriable[3], veriable[3], veriable[0],  black );
}


void SetupVeriablePalette2()
{
  CRGB black  = CRGB::Black;
  currentPalette = CRGBPalette16(
                     veriable[0], black, veriable[1],  black,
                     veriable[2], black, veriable[3],  black,
                     veriable[0], black, veriable[1],  black,
                     veriable[2], black, veriable[3],  black );
}


void SetupVeriablePalette3()
{
  currentPalette = CRGBPalette16(
                     veriable[0], veriable[1], veriable[2], veriable[3],
                     veriable[0], veriable[1], veriable[2], veriable[3],
                     veriable[0], veriable[1], veriable[2], veriable[3],
                     veriable[0], veriable[1], veriable[2], veriable[3]);
}


void SetupVeriablePalette4()
{
  currentPalette = CRGBPalette16(
                     veriable[0], veriable[0], veriable[1], veriable[1],
                     veriable[2], veriable[2], veriable[3], veriable[3],
                     veriable[0], veriable[0], veriable[1], veriable[1],
                     veriable[2], veriable[2], veriable[3], veriable[3]);
}


void SetupVeriablePalette5()
{
  currentPalette = CRGBPalette16(
                     veriable[0], veriable[0], veriable[0], veriable[0],
                     veriable[1], veriable[1], veriable[1], veriable[1],
                     veriable[2], veriable[2], veriable[2], veriable[2],
                     veriable[3], veriable[3], veriable[3], veriable[3]);
}


void SetupPurpleAndGreenPalette()
{
  CRGB purple = CHSV( HUE_PURPLE, 255, 255);
  CRGB green  = CHSV( HUE_GREEN, 255, 255);
  CRGB black  = CRGB::Black;

  currentPalette = CRGBPalette16(
                     green,  green,  black,  black,
                     purple, purple, black,  black,
                     green,  green,  black,  black,
                     purple, purple, black,  black );
}


void rainbow2() {
  static uint8_t starthue = 0;
  fill_rainbow( leds, NUM_LEDS, --starthue, 20);
  FastLED.show();
  FastLED.delay(1000 / UPDATES_PER_SECOND);
  //delay(100);
}


void fire()
{
  // Add entropy to random number generator; we use a lot of it.
  random16_add_entropy( random());

  Fire2012(); // run simulation frame
  FastLED.show(); // display this frame
  FastLED.delay(1000 / UPDATES_PER_SECOND);
}


void Fire2012()
{
  // Array of temperature readings at each simulation cell
  static byte heat[NUM_LEDS];

  // Step 1.  Cool down every cell a little
  for ( int i = 0; i < NUM_LEDS; i++) {
    heat[i] = qsub8( heat[i],  random8(0, ((COOLING * 10) / NUM_LEDS) + 2));
  }

  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for ( int k = NUM_LEDS - 3; k > 0; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2] ) / 3;
  }

  // Step 3.  Randomly ignite new 'sparks' of heat near the bottom
  if ( random8() < SPARKING ) {
    int y = random8(7);
    heat[y] = qadd8( heat[y], random8(160, 255) );
  }

  // Step 4.  Map from heat cells to LED colors
  for ( int j = 0; j < NUM_LEDS; j++) {
    leds[j] = HeatColor( heat[j]);
  }
}


void sevenSegWrite(byte digit) {
  byte pin = 2;
  for (byte segCount = 0; segCount < 7; ++segCount) {
    digitalWrite(pin, seven_seg_digits[digit][segCount]);
    ++pin;
  }
}


void writeDot(byte dot) {
  digitalWrite(9, dot);
}
